import Head from 'next/head'
import { Inter } from 'next/font/google'
import styles from "@/styles/Home.module.css";
import { ApolloClient, InMemoryCache, gql } from "@apollo/client";
import Link from "next/link";


const inter = Inter({ subsets: ['latin'] })

export default function Home({pokemon}) {
  console.log(pokemon);
  var count = 0;
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>

        <div className={styles.center}>
          <h1>Pokemon Pokedex</h1>
        </div>
        {pokemon.map((subPokemon, key) => {
          if (key === count){
            count += 3;
            return (
              <div className={styles.card} key={key}>
                <div className='mainCard'>
                  <img style={{ height: "200px" }} src={subPokemon.image}></img>
                  <h2 className={styles.name}>{subPokemon.name}{key}</h2>
                  {subPokemon.types.map((type) => {
                    if (type) {
                      return (
                        <p className={styles.natureType} key={key}>
                          {type}{" "}
                        </p>
                      );
                    }
                  })}
                  <p className={styles.pokemonNnumber} key={key}>
                    number: {subPokemon.number}
                  </p>
                  <button className={styles.btn}>
                    <Link
                      href={"/details/" + subPokemon.number}
                      key={subPokemon.number}
                    >Details</Link>
                  </button>
                </div>
              </div>
            );
            
          }else {
            
          }
          
        }) 
      }     
      </main>
    </>
  )
}


export async function getStaticProps() {
  const client = new ApolloClient({
    uri: "https://graphql-pokemon2.vercel.app",
    cache: new InMemoryCache()
  })

 const { data } = await client.query({
   query: gql`
     query pokemons {
       pokemons(first: 100) {
         id
         number
         name
         weight {
           minimum
           maximum
         }
         height {
           minimum
           maximum
         }
         classification
         types
         resistant
         weaknesses
         fleeRate
         maxCP
         maxHP
         image
       }
     }
   `,
 });
  return {
    props: {
      pokemon: data.pokemons,
    }
  }
} 